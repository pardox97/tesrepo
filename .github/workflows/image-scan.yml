name: Scan ECR Image for Vulnerabilities

on:
  workflow_dispatch:
    inputs:
      ecr_repos:
        description: "Comma-separated list of ECR repositories to scan"
        required: true

permissions:
  id-token: write           # Required for OIDC
  contents: read
  security-events: write
  
jobs:
  scan-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::801754344896:role/GitHubActionsRole
          aws-region: us-west-2

      - name: Confirm identity
        run: aws sts get-caller-identity

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get Latest Image Tag
        id: get-latest-tag
        run: |
          LATEST_TAG=$(aws ecr describe-images \
            --repository-name testrepo \
            --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' \
            --output text)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      # - name: Install jq
      #   run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          sudo mv ./bin/trivy /usr/local/bin/
          trivy --version  # Verify installation

      - name: Scan Image with Trivy and Save Report
        run: |
          ECR_REPOS="${{ github.event.inputs.ecr_repos }}"
          AWS_ACCOUNT_ID="801754344896"  # Replace with actual AWS account ID
          REGION="us-west-2"

          IFS=',' read -r -a REPO_ARRAY <<< "$ECR_REPOS"

          for REPO in "${REPO_ARRAY[@]}"; do
            echo "üîç Fetching latest image tag for $REPO..."
            LATEST_TAG=$(aws ecr describe-images \
              --repository-name $REPO \
              --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' \
              --output text)

            if [[ "$LATEST_TAG" == "None" || -z "$LATEST_TAG" ]]; then
              echo "‚ö†Ô∏è No valid image tag found for $REPO, skipping..."
              continue
            fi

            IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO:$LATEST_TAG"
            echo "üì• Pulling image $IMAGE_URI ..."
            docker pull "$IMAGE_URI"
            echo "Scanning $IMAGE_URI ..."
            sudo ifconfig eth0 down  # disable network temporarily
            trivy image $IMAGE_URI --scanners vuln --format json -o trivy-report.json 
            trivy image $IMAGE_URI --scanners vuln --format sarif -o trivy-results.sarif
            sudo ifconfig eth0 up  # re-enable network
            jq --arg image "$IMAGE_URI" \
              '.runs[0].results |= map(.message.text |= "[IMAGE: \($image)] " + .)' \
              trivy-results.sarif > trivy-results-patched.sarif
          done

      # - name: Scan Image with Trivy and Save Report
      #   run: |
      #     trivy image 801754344896.dkr.ecr.us-west-2.amazonaws.com/testrepo:${{ env.LATEST_TAG }} \
      #     --format json --severity CRITICAL,HIGH > trivy-report.json

      - name: Debug Trivy Report
        run: |
          if [ ! -f trivy-report.json ]; then
            echo "‚ùå trivy-report.json NOT FOUND!"
            exit 1
          else
            echo "‚úÖ trivy-report.json exists!"
            ls -lh trivy-report.json
          fi

      - name: Upload Vulnerability Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Display Vulnerabilities
        run: cat trivy-report.json | jq '.Results[].Vulnerabilities[] | {ID, PkgName, InstalledVersion, Severity, Title, Description}'

      - name: Upload Report to S3
        run: |
          aws s3 cp trivy-report.json s3://tesbucketforactions/trivy-report.json

      - name: Install Python and Dependencies
        run: pip install boto3

      - name: Send Vulnerability Report via SES
        run: |
          pwd
          python .github/ecr_email/send_email.py
      
      - name: Upload Trivy SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Fail on Critical Vulnerabilities
        run: |
          if jq -e '.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL" or .Severity == "HIGH")' trivy-report.json > /dev/null; then
            echo "‚ùå Critical or High vulnerabilities found!"
            exit 1
          fi
